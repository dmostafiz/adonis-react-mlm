(self["webpackChunkadonismlm"] = self["webpackChunkadonismlm"] || []).push([["node_modules_web3auth_phantom-adapter_dist_phantomAdapter_esm_js"],{

/***/ "./node_modules/@web3auth/phantom-adapter/dist/phantomAdapter.esm.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@web3auth/phantom-adapter/dist/phantomAdapter.esm.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "PhantomAdapter": () => (/* binding */ PhantomAdapter)
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "./node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var _web3auth_base__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @web3auth/base */ "./node_modules/@web3auth/base/dist/base.esm.js");
/* harmony import */ var _web3auth_solana_provider__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @web3auth/solana-provider */ "./node_modules/@web3auth/solana-provider/dist/solanaProvider.esm.js");




function poll(callback, interval, count) {
  return new Promise((resolve, reject) => {
    if (count > 0) {
      setTimeout(async () => {
        const done = await callback();
        if (done) resolve(done);
        if (!done) poll(callback, interval, count - 1).then(res => {
          resolve(res);
          return res;
        }).catch(err => reject(err));
      }, interval);
    } else {
      resolve(false);
    }
  });
}
const detectProvider = async function () {
  var _window$solana;

  let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {
    interval: 1000,
    count: 3
  };
  const isPhantomAvailable = typeof window !== "undefined" && !!((_window$solana = window.solana) !== null && _window$solana !== void 0 && _window$solana.isPhantom);

  if (isPhantomAvailable) {
    return window.solana;
  }

  const isAvailable = await poll(() => {
    var _window$solana2;

    return (_window$solana2 = window.solana) === null || _window$solana2 === void 0 ? void 0 : _window$solana2.isPhantom;
  }, options.interval, options.count);
  if (isAvailable) return window.solana;
  return null;
};

class PhantomAdapter extends _web3auth_base__WEBPACK_IMPORTED_MODULE_1__.BaseAdapter {
  constructor() {
    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    super();

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "name", _web3auth_base__WEBPACK_IMPORTED_MODULE_1__.WALLET_ADAPTERS.PHANTOM);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "adapterNamespace", _web3auth_base__WEBPACK_IMPORTED_MODULE_1__.ADAPTER_NAMESPACES.SOLANA);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "currentChainNamespace", _web3auth_base__WEBPACK_IMPORTED_MODULE_1__.CHAIN_NAMESPACES.SOLANA);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "type", _web3auth_base__WEBPACK_IMPORTED_MODULE_1__.ADAPTER_CATEGORY.EXTERNAL);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "status", _web3auth_base__WEBPACK_IMPORTED_MODULE_1__.ADAPTER_STATUS.NOT_READY);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "_wallet", null);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "phantomProvider", null);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "rehydrated", false);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "_onDisconnect", () => {
      if (this._wallet) {
        this._wallet.off("disconnect", this._onDisconnect);

        this.rehydrated = false; // ready to be connected again only if it was previously connected and not cleaned up

        this.status = this.status === _web3auth_base__WEBPACK_IMPORTED_MODULE_1__.ADAPTER_STATUS.CONNECTED ? _web3auth_base__WEBPACK_IMPORTED_MODULE_1__.ADAPTER_STATUS.READY : _web3auth_base__WEBPACK_IMPORTED_MODULE_1__.ADAPTER_STATUS.NOT_READY;
        this.emit(_web3auth_base__WEBPACK_IMPORTED_MODULE_1__.ADAPTER_EVENTS.DISCONNECTED);
      }
    });

    this.chainConfig = options.chainConfig || null;
  }

  get isWalletConnected() {
    var _this$_wallet;

    return !!((_this$_wallet = this._wallet) !== null && _this$_wallet !== void 0 && _this$_wallet.isConnected && this.status === _web3auth_base__WEBPACK_IMPORTED_MODULE_1__.ADAPTER_STATUS.CONNECTED);
  }

  get provider() {
    var _this$phantomProvider;

    return ((_this$phantomProvider = this.phantomProvider) === null || _this$phantomProvider === void 0 ? void 0 : _this$phantomProvider.provider) || null;
  }

  set provider(_) {
    throw new Error("Not implemented");
  }

  setAdapterSettings(_) {}

  async init(options) {
    super.checkInitializationRequirements(); // set chainConfig for mainnet by default if not set

    if (!this.chainConfig) {
      this.chainConfig = (0,_web3auth_base__WEBPACK_IMPORTED_MODULE_1__.getChainConfig)(_web3auth_base__WEBPACK_IMPORTED_MODULE_1__.CHAIN_NAMESPACES.SOLANA, "0x1");
    }

    this._wallet = await detectProvider({
      interval: 500,
      count: 3
    });
    if (!this._wallet) throw _web3auth_base__WEBPACK_IMPORTED_MODULE_1__.WalletInitializationError.notInstalled();
    this.phantomProvider = new _web3auth_solana_provider__WEBPACK_IMPORTED_MODULE_2__.PhantomInjectedProvider({
      config: {
        chainConfig: this.chainConfig
      }
    });
    this.status = _web3auth_base__WEBPACK_IMPORTED_MODULE_1__.ADAPTER_STATUS.READY;
    this.emit(_web3auth_base__WEBPACK_IMPORTED_MODULE_1__.ADAPTER_EVENTS.READY, _web3auth_base__WEBPACK_IMPORTED_MODULE_1__.WALLET_ADAPTERS.PHANTOM);

    try {
      _web3auth_base__WEBPACK_IMPORTED_MODULE_1__.log.debug("initializing phantom adapter");

      if (options.autoConnect) {
        this.rehydrated = true;
        await this.connect();
      }
    } catch (error) {
      _web3auth_base__WEBPACK_IMPORTED_MODULE_1__.log.error("Failed to connect with cached phantom provider", error);
      this.emit("ERRORED", error);
    }
  }

  async connect() {
    var _this = this;

    try {
      super.checkConnectionRequirements();
      this.status = _web3auth_base__WEBPACK_IMPORTED_MODULE_1__.ADAPTER_STATUS.CONNECTING;
      this.emit(_web3auth_base__WEBPACK_IMPORTED_MODULE_1__.ADAPTER_EVENTS.CONNECTING, {
        adapter: _web3auth_base__WEBPACK_IMPORTED_MODULE_1__.WALLET_ADAPTERS.PHANTOM
      });
      if (!this._wallet) throw _web3auth_base__WEBPACK_IMPORTED_MODULE_1__.WalletInitializationError.notInstalled();

      if (!this._wallet.isConnected) {
        const handleDisconnect = this._wallet._handleDisconnect;

        try {
          await new Promise((resolve, reject) => {
            const connect = async () => {
              await this.connectWithProvider(this._wallet);
              resolve(this.provider);
            };

            if (!this._wallet) return reject(_web3auth_base__WEBPACK_IMPORTED_MODULE_1__.WalletInitializationError.notInstalled());

            this._wallet.once("connect", connect); // Raise an issue on phantom that if window is closed, disconnect event is not fired


            this._wallet._handleDisconnect = function () {
              reject(_web3auth_base__WEBPACK_IMPORTED_MODULE_1__.WalletInitializationError.windowClosed());

              for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
                args[_key] = arguments[_key];
              }

              return handleDisconnect.apply(_this._wallet, args);
            };

            this._wallet.connect().catch(reason => {
              reject(reason);
            });
          });
        } catch (error) {
          if (error instanceof _web3auth_base__WEBPACK_IMPORTED_MODULE_1__.Web3AuthError) throw error;
          throw _web3auth_base__WEBPACK_IMPORTED_MODULE_1__.WalletLoginError.connectionError(error === null || error === void 0 ? void 0 : error.message);
        } finally {
          this._wallet._handleDisconnect = handleDisconnect;
        }
      } else {
        await this.connectWithProvider(this._wallet);
      }

      if (!this._wallet.publicKey) throw _web3auth_base__WEBPACK_IMPORTED_MODULE_1__.WalletLoginError.connectionError();

      this._wallet.on("disconnect", this._onDisconnect);

      return this.provider;
    } catch (error) {
      // ready again to be connected
      this.status = _web3auth_base__WEBPACK_IMPORTED_MODULE_1__.ADAPTER_STATUS.READY;
      this.rehydrated = false;
      this.emit(_web3auth_base__WEBPACK_IMPORTED_MODULE_1__.ADAPTER_EVENTS.ERRORED, error);
      throw error;
    }
  }

  async disconnect() {
    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {
      cleanup: false
    };
    if (!this.isWalletConnected) throw _web3auth_base__WEBPACK_IMPORTED_MODULE_1__.WalletLoginError.notConnectedError("Not connected with wallet");

    try {
      var _this$_wallet2;

      await ((_this$_wallet2 = this._wallet) === null || _this$_wallet2 === void 0 ? void 0 : _this$_wallet2.disconnect());

      if (options.cleanup) {
        this.status = _web3auth_base__WEBPACK_IMPORTED_MODULE_1__.ADAPTER_STATUS.NOT_READY;
        this.phantomProvider = null;
        this._wallet = null;
      }

      this.emit(_web3auth_base__WEBPACK_IMPORTED_MODULE_1__.ADAPTER_EVENTS.DISCONNECTED);
    } catch (error) {
      this.emit(_web3auth_base__WEBPACK_IMPORTED_MODULE_1__.ADAPTER_EVENTS.ERRORED, _web3auth_base__WEBPACK_IMPORTED_MODULE_1__.WalletLoginError.disconnectionError(error === null || error === void 0 ? void 0 : error.message));
    }
  }

  async getUserInfo() {
    if (!this.isWalletConnected) throw _web3auth_base__WEBPACK_IMPORTED_MODULE_1__.WalletLoginError.notConnectedError("Not connected with wallet, Please login/connect first");
    return {};
  }

  async connectWithProvider(injectedProvider) {
    if (!this.phantomProvider) throw _web3auth_base__WEBPACK_IMPORTED_MODULE_1__.WalletLoginError.connectionError("No phantom provider");
    await this.phantomProvider.setupProvider(injectedProvider);
    this.status = _web3auth_base__WEBPACK_IMPORTED_MODULE_1__.ADAPTER_STATUS.CONNECTED;
    this.emit(_web3auth_base__WEBPACK_IMPORTED_MODULE_1__.ADAPTER_EVENTS.CONNECTED, {
      adapter: _web3auth_base__WEBPACK_IMPORTED_MODULE_1__.WALLET_ADAPTERS.PHANTOM,
      reconnected: this.rehydrated
    });
    return this.provider;
  }

}


//# sourceMappingURL=phantomAdapter.esm.js.map


/***/ }),

/***/ "?6c05":
/*!************************!*\
  !*** buffer (ignored) ***!
  \************************/
/***/ (() => {

/* (ignored) */

/***/ }),

/***/ "?0b24":
/*!************************!*\
  !*** crypto (ignored) ***!
  \************************/
/***/ (() => {

/* (ignored) */

/***/ }),

/***/ "?1ce7":
/*!************************!*\
  !*** crypto (ignored) ***!
  \************************/
/***/ (() => {

/* (ignored) */

/***/ }),

/***/ "?866b":
/*!************************!*\
  !*** buffer (ignored) ***!
  \************************/
/***/ (() => {

/* (ignored) */

/***/ }),

/***/ "?4a58":
/*!************************!*\
  !*** buffer (ignored) ***!
  \************************/
/***/ (() => {

/* (ignored) */

/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,