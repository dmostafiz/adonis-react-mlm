"use strict";
(self["webpackChunkadonismlm"] = self["webpackChunkadonismlm"] || []).push([["vendors-node_modules_web3auth_wallet-connect-v1-adapter_dist_walletConnectV1Adapter_esm_js"],{

/***/ "./node_modules/@web3auth/wallet-connect-v1-adapter/dist/walletConnectV1Adapter.esm.js":
/*!*********************************************************************************************!*\
  !*** ./node_modules/@web3auth/wallet-connect-v1-adapter/dist/walletConnectV1Adapter.esm.js ***!
  \*********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "WalletConnectV1Adapter": () => (/* binding */ WalletConnectV1Adapter)
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "./node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var _walletconnect_client__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @walletconnect/client */ "./node_modules/@walletconnect/client/dist/esm/index.js");
/* harmony import */ var _web3auth_base__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @web3auth/base */ "./node_modules/@web3auth/base/dist/base.esm.js");
/* harmony import */ var _web3auth_ethereum_provider__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @web3auth/ethereum-provider */ "./node_modules/@web3auth/ethereum-provider/dist/ethereumProvider.esm.js");





const WALLET_CONNECT_EXTENSION_ADAPTERS = [{
  name: "Rainbow",
  chains: [_web3auth_base__WEBPACK_IMPORTED_MODULE_2__.CHAIN_NAMESPACES.EIP155],
  logo: "https://images.web3auth.io/login-rainbow.svg",
  mobile: {
    native: "rainbow:",
    universal: "https://rnbwapp.com"
  },
  desktop: {
    native: "",
    universal: ""
  }
}, {
  name: "MetaMask",
  chains: [_web3auth_base__WEBPACK_IMPORTED_MODULE_2__.CHAIN_NAMESPACES.EIP155],
  logo: "https://images.web3auth.io/login-metamask.svg",
  mobile: {
    native: "metamask:",
    universal: "https://metamask.app.link"
  },
  desktop: {
    native: "",
    universal: ""
  }
}];

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

class WalletConnectV1Adapter extends _web3auth_base__WEBPACK_IMPORTED_MODULE_2__.BaseAdapter {
  constructor() {
    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    super();

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "name", _web3auth_base__WEBPACK_IMPORTED_MODULE_2__.WALLET_ADAPTERS.WALLET_CONNECT_V1);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "adapterNamespace", _web3auth_base__WEBPACK_IMPORTED_MODULE_2__.ADAPTER_NAMESPACES.EIP155);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "currentChainNamespace", _web3auth_base__WEBPACK_IMPORTED_MODULE_2__.CHAIN_NAMESPACES.EIP155);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "type", _web3auth_base__WEBPACK_IMPORTED_MODULE_2__.ADAPTER_CATEGORY.EXTERNAL);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "adapterOptions", void 0);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "status", _web3auth_base__WEBPACK_IMPORTED_MODULE_2__.ADAPTER_STATUS.NOT_READY);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "adapterData", {
      uri: "",
      extensionAdapters: WALLET_CONNECT_EXTENSION_ADAPTERS
    });

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "connector", null);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "wcProvider", null);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "rehydrated", false);

    this.adapterOptions = _objectSpread({}, options);
    this.chainConfig = options.chainConfig || null;
  }

  get connected() {
    var _this$connector;

    return !!((_this$connector = this.connector) !== null && _this$connector !== void 0 && _this$connector.connected);
  }

  get provider() {
    var _this$wcProvider;

    return ((_this$wcProvider = this.wcProvider) === null || _this$wcProvider === void 0 ? void 0 : _this$wcProvider.provider) || null;
  }

  set provider(_) {
    throw new Error("Not implemented");
  }

  async init() {
    super.checkInitializationRequirements();

    if (!this.chainConfig) {
      this.chainConfig = (0,_web3auth_base__WEBPACK_IMPORTED_MODULE_2__.getChainConfig)(_web3auth_base__WEBPACK_IMPORTED_MODULE_2__.CHAIN_NAMESPACES.EIP155, 1);
    } // Create a connector


    this.connector = this.getWalletConnectInstance();
    this.wcProvider = new _web3auth_ethereum_provider__WEBPACK_IMPORTED_MODULE_3__.WalletConnectProvider({
      config: {
        chainConfig: this.chainConfig
      },
      connector: this.connector
    });
    this.emit(_web3auth_base__WEBPACK_IMPORTED_MODULE_2__.ADAPTER_EVENTS.READY, _web3auth_base__WEBPACK_IMPORTED_MODULE_2__.WALLET_ADAPTERS.WALLET_CONNECT_V1);
    this.status = _web3auth_base__WEBPACK_IMPORTED_MODULE_2__.ADAPTER_STATUS.READY;
    _web3auth_base__WEBPACK_IMPORTED_MODULE_2__.log.debug("initializing wallet connect v1 adapter");

    if (this.connector.connected) {
      this.rehydrated = true;
      await this.onConnectHandler({
        accounts: this.connector.accounts,
        chainId: this.connector.chainId
      });
    }
  }

  async connect() {
    super.checkConnectionRequirements();
    if (!this.connector) throw _web3auth_base__WEBPACK_IMPORTED_MODULE_2__.WalletInitializationError.notReady("Wallet adapter is not ready yet");

    if (this.connected) {
      await this.onConnectHandler({
        accounts: this.connector.accounts,
        chainId: this.connector.chainId
      });
      return this.provider;
    }

    if (this.status !== _web3auth_base__WEBPACK_IMPORTED_MODULE_2__.ADAPTER_STATUS.CONNECTING) {
      var _this$adapterOptions$;

      // for wallet connect qr code modal we have to create a new connector, coz wallet connect internally does not open
      // modal again on existing instance if connection is pending.
      if ((_this$adapterOptions$ = this.adapterOptions.adapterSettings) !== null && _this$adapterOptions$ !== void 0 && _this$adapterOptions$.qrcodeModal) {
        var _this$adapterOptions$2;

        this.connector = this.getWalletConnectInstance();
        this.wcProvider = new _web3auth_ethereum_provider__WEBPACK_IMPORTED_MODULE_3__.WalletConnectProvider({
          config: {
            chainConfig: this.chainConfig,
            // network switching can be skipped with custom ui
            skipLookupNetwork: (_this$adapterOptions$2 = this.adapterOptions.adapterSettings) === null || _this$adapterOptions$2 === void 0 ? void 0 : _this$adapterOptions$2.skipNetworkSwitching
          },
          connector: this.connector
        });
      }

      await this.createNewSession();
      this.status = _web3auth_base__WEBPACK_IMPORTED_MODULE_2__.ADAPTER_STATUS.CONNECTING;
      this.emit(_web3auth_base__WEBPACK_IMPORTED_MODULE_2__.ADAPTER_EVENTS.CONNECTING, {
        adapter: _web3auth_base__WEBPACK_IMPORTED_MODULE_2__.WALLET_ADAPTERS.WALLET_CONNECT_V1
      });
    }

    return new Promise((resolve, reject) => {
      if (!this.connector) return reject(_web3auth_base__WEBPACK_IMPORTED_MODULE_2__.WalletInitializationError.notReady("Wallet adapter is not ready yet")); // for wallet connect default modal.

      this.connector.on("modal_closed", async () => {
        this.status = _web3auth_base__WEBPACK_IMPORTED_MODULE_2__.ADAPTER_STATUS.READY;
        this.emit(_web3auth_base__WEBPACK_IMPORTED_MODULE_2__.ADAPTER_EVENTS.READY, _web3auth_base__WEBPACK_IMPORTED_MODULE_2__.WALLET_ADAPTERS.WALLET_CONNECT_V1);
        return reject(new Error("User closed modal"));
      });

      try {
        // Subscribe to session connection
        this.connector.on("connect", async (error, payload) => {
          if (error) {
            this.emit(_web3auth_base__WEBPACK_IMPORTED_MODULE_2__.ADAPTER_EVENTS.ERRORED, error);
          }

          _web3auth_base__WEBPACK_IMPORTED_MODULE_2__.log.debug("connected event emitted by web3auth");
          await this.onConnectHandler(payload.params[0]);
          return resolve(this.provider);
        });
      } catch (error) {
        _web3auth_base__WEBPACK_IMPORTED_MODULE_2__.log.error("Wallet connect v1 adapter error while connecting", error); // ready again to be connected

        this.status = _web3auth_base__WEBPACK_IMPORTED_MODULE_2__.ADAPTER_STATUS.READY;
        this.rehydrated = true;
        this.emit(_web3auth_base__WEBPACK_IMPORTED_MODULE_2__.ADAPTER_EVENTS.ERRORED, error);
        reject(error instanceof _web3auth_base__WEBPACK_IMPORTED_MODULE_2__.Web3AuthError ? error : _web3auth_base__WEBPACK_IMPORTED_MODULE_2__.WalletLoginError.connectionError("Failed to login with wallet connect: ".concat((error === null || error === void 0 ? void 0 : error.message) || "")));
      }
    });
  }

  async getUserInfo() {
    if (!this.connected) throw _web3auth_base__WEBPACK_IMPORTED_MODULE_2__.WalletLoginError.notConnectedError("Not connected with wallet, Please login/connect first");
    return {};
  }

  async disconnect() {
    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {
      cleanup: false
    };
    const {
      cleanup
    } = options;
    if (!this.connector || !this.connected) throw _web3auth_base__WEBPACK_IMPORTED_MODULE_2__.WalletLoginError.notConnectedError("Not connected with wallet");
    await this.connector.killSession();
    this.rehydrated = false;

    if (cleanup) {
      this.connector = null;
      this.status = _web3auth_base__WEBPACK_IMPORTED_MODULE_2__.ADAPTER_STATUS.NOT_READY;
      this.wcProvider = null;
    } else {
      // ready to connect again
      this.status = _web3auth_base__WEBPACK_IMPORTED_MODULE_2__.ADAPTER_STATUS.READY;
    }

    this.emit(_web3auth_base__WEBPACK_IMPORTED_MODULE_2__.ADAPTER_EVENTS.DISCONNECTED);
  }

  async addChain(chainConfig) {
    try {
      var _this$adapterOptions$3;

      if (!this.wcProvider) throw _web3auth_base__WEBPACK_IMPORTED_MODULE_2__.WalletInitializationError.notReady("Wallet adapter is not ready yet");
      const networkSwitch = (_this$adapterOptions$3 = this.adapterOptions.adapterSettings) === null || _this$adapterOptions$3 === void 0 ? void 0 : _this$adapterOptions$3.networkSwitchModal;

      if (networkSwitch) {
        await networkSwitch.addNetwork({
          chainConfig,
          appOrigin: window.location.hostname
        });
      }

      await this.wcProvider.addChain(chainConfig);
    } catch (error) {
      _web3auth_base__WEBPACK_IMPORTED_MODULE_2__.log.error(error);
    }
  }

  async switchChain(connectedChainConfig, chainConfig) {
    var _this$adapterOptions$4;

    if (!this.wcProvider) throw _web3auth_base__WEBPACK_IMPORTED_MODULE_2__.WalletInitializationError.notReady("Wallet adapter is not ready yet");
    const networkSwitch = (_this$adapterOptions$4 = this.adapterOptions.adapterSettings) === null || _this$adapterOptions$4 === void 0 ? void 0 : _this$adapterOptions$4.networkSwitchModal;

    if (networkSwitch) {
      await networkSwitch.switchNetwork({
        currentChainConfig: chainConfig,
        newChainConfig: connectedChainConfig,
        appOrigin: window.location.hostname
      });
    }

    await this.wcProvider.switchChain({
      chainId: chainConfig.chainId,
      lookup: false,
      addChain: false
    });
  }

  async createNewSession() {
    var _this$adapterOptions, _this$adapterOptions$5;

    let opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {
      forceNewSession: false
    };
    if (!this.connector) throw _web3auth_base__WEBPACK_IMPORTED_MODULE_2__.WalletInitializationError.notReady("Wallet adapter is not ready yet");

    if (opts.forceNewSession && this.connector.pending) {
      await this.connector.killSession();
    } // for wallet connect qr modal


    if ((_this$adapterOptions = this.adapterOptions) !== null && _this$adapterOptions !== void 0 && (_this$adapterOptions$5 = _this$adapterOptions.adapterSettings) !== null && _this$adapterOptions$5 !== void 0 && _this$adapterOptions$5.qrcodeModal) {
      var _this$chainConfig;

      await this.connector.createSession({
        chainId: parseInt(((_this$chainConfig = this.chainConfig) === null || _this$chainConfig === void 0 ? void 0 : _this$chainConfig.chainId) || "0x1", 16)
      });
      return;
    } // for web3auth qr code modal


    return new Promise((resolve, reject) => {
      var _this$chainConfig2;

      if (!this.connector) return reject(_web3auth_base__WEBPACK_IMPORTED_MODULE_2__.WalletInitializationError.notReady("Wallet adapter is not ready yet"));
      _web3auth_base__WEBPACK_IMPORTED_MODULE_2__.log.debug("creating new session for web3auth wallet connect");
      this.connector.on("display_uri", async (err, payload) => {
        var _this$connector2;

        if (err) {
          this.emit(_web3auth_base__WEBPACK_IMPORTED_MODULE_2__.ADAPTER_EVENTS.ERRORED, _web3auth_base__WEBPACK_IMPORTED_MODULE_2__.WalletLoginError.connectionError("Failed to display wallet connect qr code"));
          return reject(err);
        }

        const uri = payload.params[0];
        this.updateAdapterData({
          uri,
          extensionAdapters: WALLET_CONNECT_EXTENSION_ADAPTERS
        });
        (_this$connector2 = this.connector) === null || _this$connector2 === void 0 ? void 0 : _this$connector2.off("display_uri");
        return resolve();
      });
      this.connector.createSession({
        chainId: parseInt(((_this$chainConfig2 = this.chainConfig) === null || _this$chainConfig2 === void 0 ? void 0 : _this$chainConfig2.chainId) || "0x1", 16)
      }).catch(error => {
        _web3auth_base__WEBPACK_IMPORTED_MODULE_2__.log.error("error while creating new wallet connect session", error);
        this.emit(_web3auth_base__WEBPACK_IMPORTED_MODULE_2__.ADAPTER_EVENTS.ERRORED, error);
        return reject(error);
      });
    });
  }

  async onConnectHandler(params) {
    if (!this.connector || !this.wcProvider) throw _web3auth_base__WEBPACK_IMPORTED_MODULE_2__.WalletInitializationError.notReady("Wallet adapter is not ready yet");
    if (!this.chainConfig) throw _web3auth_base__WEBPACK_IMPORTED_MODULE_2__.WalletInitializationError.invalidParams("Chain config is not set");
    const {
      chainId
    } = params;
    _web3auth_base__WEBPACK_IMPORTED_MODULE_2__.log.debug("connected chainId in hex");

    if (chainId !== parseInt(this.chainConfig.chainId, 16)) {
      var _this$adapterOptions$6, _this$adapterOptions2, _this$adapterOptions3;

      const connectedChainConfig = (0,_web3auth_base__WEBPACK_IMPORTED_MODULE_2__.getChainConfig)(_web3auth_base__WEBPACK_IMPORTED_MODULE_2__.CHAIN_NAMESPACES.EIP155, chainId) || {
        chainId: "0x".concat(chainId.toString(16)),
        displayName: "Unknown Network"
      };
      const isCustomUi = (_this$adapterOptions$6 = this.adapterOptions.adapterSettings) === null || _this$adapterOptions$6 === void 0 ? void 0 : _this$adapterOptions$6.qrcodeModal; // skipping network is not allowed in default ui. We are use network switching modal for default ui.

      if (!isCustomUi || isCustomUi && !((_this$adapterOptions2 = this.adapterOptions) !== null && _this$adapterOptions2 !== void 0 && (_this$adapterOptions3 = _this$adapterOptions2.adapterSettings) !== null && _this$adapterOptions3 !== void 0 && _this$adapterOptions3.skipNetworkSwitching)) {
        try {
          await this.addChain(this.chainConfig);
          await this.switchChain(connectedChainConfig, this.chainConfig);
          this.connector = this.getWalletConnectInstance();
        } catch (error) {
          _web3auth_base__WEBPACK_IMPORTED_MODULE_2__.log.error("error while chain switching", error); // we need to create a new session since old session is already used and
          // user needs to login again with correct chain with new qr code.

          await this.createNewSession({
            forceNewSession: true
          });
          this.emit(_web3auth_base__WEBPACK_IMPORTED_MODULE_2__.ADAPTER_EVENTS.ERRORED, _web3auth_base__WEBPACK_IMPORTED_MODULE_2__.WalletInitializationError.fromCode(5000, "Not connected to correct network. Expected: ".concat(this.chainConfig.displayName, ", Current: ").concat((connectedChainConfig === null || connectedChainConfig === void 0 ? void 0 : connectedChainConfig.displayName) || chainId, ", Please switch to correct network from wallet")));
          this.status = _web3auth_base__WEBPACK_IMPORTED_MODULE_2__.ADAPTER_STATUS.READY;
          this.rehydrated = true;
          return;
        }
      }
    }

    await this.wcProvider.setupProvider(this.connector);
    this.subscribeEvents(this.connector);
    this.status = _web3auth_base__WEBPACK_IMPORTED_MODULE_2__.ADAPTER_STATUS.CONNECTED;
    this.emit(_web3auth_base__WEBPACK_IMPORTED_MODULE_2__.ADAPTER_EVENTS.CONNECTED, {
      adapter: _web3auth_base__WEBPACK_IMPORTED_MODULE_2__.WALLET_ADAPTERS.WALLET_CONNECT_V1,
      reconnected: this.rehydrated
    });
  }

  subscribeEvents(connector) {
    connector.on("session_update", async error => {
      if (error) {
        this.emit(_web3auth_base__WEBPACK_IMPORTED_MODULE_2__.ADAPTER_EVENTS.ERRORED, error);
      }
    });
  }

  getWalletConnectInstance() {
    const walletConnectOptions = this.adapterOptions.adapterSettings || {};
    walletConnectOptions.bridge = walletConnectOptions.bridge || "https://bridge.walletconnect.org"; // Create a connector

    return new _walletconnect_client__WEBPACK_IMPORTED_MODULE_1__["default"](walletConnectOptions);
  }

}


//# sourceMappingURL=walletConnectV1Adapter.esm.js.map


/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,